import java.util.Random;
class HandleError {
  public static void main(String args[]) {
This program generates the following output: 
Division by zero.
After catch statement.
int a=0, b=0, c=0;
         Random r = new Random();
         for(int i=0; i<32000; i++) {
           try {
             b = r.nextInt();
             c = r.nextInt();
             a = 12345 / (b/c);
           } catch (ArithmeticException e) {
             System.out.println("Division by zero.");
             a = 0; // set a to zero and continue
} 
           System.out.println("a: " + a);
         }
} } 


     catch (ArithmeticException e) {
       System.out.println("Exception: " + e);
       a = 0; // set a to zero and continue
} 

// Multiple catch Clauses 
// Demonstrate multiple catch statements.
     class MultiCatch {
       public static void main(String args[]) {
         try {
      int a = args.length;
      System.out.println("a = " + a);
      int b = 42 / a;
      int c[] = { 1 };
      c[42] = 99;
    } catch(ArithmeticException e) {
      System.out.println("Divide by 0: " + e);
    } catch(ArrayIndexOutOfBoundsException e) {
      System.out.println("Array index oob: " + e);
} 
    System.out.println("After try/catch blocks.");
  }
} 



/******************************************************/
//Nested try Statements 
class NestTry {
       public static void main(String args[]) {
         try {
           int a = args.length;
           /* If no command-line args are present,
              the following statement will generate
              a divide-by-zero exception. */
    int b = 42 / a; 
           System.out.println("a = " + a);
           try { // nested try block
             /* If one command-line arg is used,
                then a divide-by-zero exception
                will be generated by the following code. */
             if(a==1) a = a/(a-a); // division by zero
             /* If two command-line args are used,
                then generate an out-of-bounds exception. */
             if(a==2) {
               int c[] = { 1 };
      c[42] = 99; // generate an out-of-bounds exception
        }
      } catch(ArrayIndexOutOfBoundsException e) {
        System.out.println("Array index out-of-bounds: " + e);
} 
    } catch(ArithmeticException e) {
      System.out.println("Divide by 0: " + e);
} } 
} 

/******************************************************/

    // Demonstrate throw.
     class ThrowDemo {
       static void demoproc() {
         try {
           throw new NullPointerException("demo");
         } catch(NullPointerException e) {
           System.out.println("Caught inside demoproc.");
           throw e; // rethrow the exception
         }
} 
       public static void main(String args[]) {
         try {
           demoproc();
         } catch(NullPointerException e) {
           System.out.println("Recaught: " + e);
         }
} } 


/******************************************************/
    // Demonstrate finally.
     class FinallyDemo {
       // Through an exception out of the method.
       static void procA() {
         try {
           System.out.println("inside procA");
           throw new RuntimeException("demo");
         } finally {
           System.out.println("procA's finally");
 } 
}



/******************************************************/

//Here is an example that illustrates the mechanics of handling chained exceptions: 
     // Demonstrate exception chaining.
class ChainExcDemo {
NullPointerException e =
    new NullPointerException("top layer");
  // add a cause
  e.initCause(new ArithmeticException("cause"));
throw e; } 
public static void main(String args[]) {
  try {
    demoproc();
  } catch(NullPointerException e) {
    // display top level exception
    System.out.println("Caught: " + e);
    // display cause exception
    System.out.println("Original cause: " +
e.getCause());
} } 
} 


/******************************************************/